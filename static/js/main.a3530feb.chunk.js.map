{"version":3,"sources":["components/question.jsx","components/main.jsx","reportWebVitals.js","index.js"],"names":["Question","updateFunc","currentScore","useState","questions","currentPoint","questionState","setQuestionState","answersArray","setAnswersArray","useEffect","AllAnswers","Array","from","inCorrectAnswers","concat","correctAnswer","i","length","j","Math","floor","random","temp","returnAnswersRandomArray","className","difficulty","question","map","elem","index","onClick","answer","changedState","checkedAnswer","correct","randomedAnswers","points","today","Date","date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","finished","endDate","answerQuest","Main","scroreInfoPart","useRef","categorySelector","categoryName","JSON","parse","sessionStorage","getItem","score","setScore","setCUrrentScore","selectedScore","setSelectedScore","categories","setCategories","selectedCategory","setCategory","selectroActiveClass","setSelectroActiveClass","arrowClass","setArrowClass","startClass","setStartClass","axios","get","then","response","data","trivia_categories","alert","catch","error","console","log","selectorClickFunc","setItem","stringify","current","classList","toggle","includes","scorePartVisisibility","show","add","remove","started","window","location","reload","selectedQuestion","ref","e","target","category","toString","substring","name","id","startDate","results","correct_answer","incorrect_answers","type","categoryId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3530feb.chunk.js","sourcesContent":["import { createElement, useCallback, useEffect, useState } from 'react'\nimport '../assets/question.scss'\n\nfunction Question({updateFunc, currentScore}){\n    const [questionState, setQuestionState] = useState(currentScore.questions[currentScore.currentPoint])\n    \n\n    const returnAnswersRandomArray = () => {\n        const AllAnswers = Array.from(questionState.inCorrectAnswers.concat(questionState.correctAnswer))\n        for (let i = 0; i < AllAnswers.length; i++) {\n            const j = Math.floor(Math.random() * ((AllAnswers.length-1) - 0)) + 0;\n            const temp = AllAnswers[i];\n            AllAnswers[i]=AllAnswers[j]\n            AllAnswers[j]=temp\n        }\n        setAnswersArray(AllAnswers);\n    }\n\n    const [answersArray, setAnswersArray] = useState([])\n\n    useEffect(() => {\n        setQuestionState(currentScore.questions[currentScore.currentPoint])\n    }, [currentScore])\n\n    useEffect(() => {\n        returnAnswersRandomArray()\n    }, [questionState])\n\n    \n\n    const answerQuest = (answer) => {\n        const currentPoint = currentScore.currentPoint\n        var changedState = currentScore\n        changedState.questions[currentPoint].checkedAnswer = answer\n        changedState.questions[currentPoint].correct = answer==changedState.questions[currentPoint].correctAnswer\n        changedState.questions[currentPoint].randomedAnswers = Array.from(answersArray )\n        changedState.points += answer==changedState.questions[currentPoint].correctAnswer?1:0\n        if(currentPoint != currentScore.questions.length-1){            \n            changedState.currentPoint = currentPoint + 1;\n        }else{\n            var today = new Date();\n            var date = today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate() + \" \" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n            changedState.finished = true\n            changedState.endDate = date\n        }\n\n        updateFunc({...currentScore, changedState})\n\n    }\n    \n\n    \n    \n\n    return <div className=\"question\">\n\n        <div className={\"questionType \" + questionState.difficulty + \"Type\"}>\n            <p>{questionState.difficulty}</p>\n        </div>\n        \n        <p className=\"questionName\">{questionState.question}</p>\n\n        <div className=\"versions\">\n            {answersArray.map((elem, index) => {\n                return <div key={index} className=\"version\" onClick={() => {answerQuest(elem)}}>\n                    <p>{elem}</p>\n                </div>\n            })}\n        </div>\n    </div>\n\n}\n\nexport default Question;","import '../assets/main.scss'\nimport ArrowBackIosNewIcon from '@mui/icons-material/ArrowBackIosNew';\nimport CloseIcon from '@mui/icons-material/Close';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { useEffect, useRef, useState } from 'react';\nimport axios from 'axios';\nimport Question from './question';\n\nfunction Main (){\n    const scroreInfoPart = useRef(null)\n    const categorySelector = useRef(null)\n    const categoryName = useRef(null)\n    const [score, setScore] = useState(JSON.parse(sessionStorage.getItem(\"score\")?sessionStorage.getItem(\"score\"):\"[]\"))\n    const [currentScore, setCUrrentScore] = useState(JSON.parse(sessionStorage.getItem(\"currentScore\")?sessionStorage.getItem(\"currentScore\"):\"{}\"))\n    const [selectedScore, setSelectedScore] = useState({})\n    const [categories, setCategories] = useState([])\n    const [selectedCategory, setCategory] = useState(-1)\n    const [selectroActiveClass, setSelectroActiveClass] = useState(\"\")\n    const [arrowClass, setArrowClass] = useState(\"\")\n    const [startClass, setStartClass] = useState(\"\")\n\n    useEffect(() => {\n        axios.get(\"https://opentdb.com/api_category.php\")\n            .then((response) => {\n                if(response.data.trivia_categories){\n                    setCategories(response.data.trivia_categories)\n                }else{\n                    alert(\"Error\")\n                }\n            })\n            .catch((error) => {\n                console.log(error)\n                alert(\"Error\")\n            })\n    }, [])\n \n\n\n    useEffect(() => {\n        if(selectedCategory>=0){\n            selectorClickFunc()\n            setStartClass(\"startActive\")\n        }\n    }, [selectedCategory])\n\n    useEffect(() => {\n        if(currentScore.finished){\n            // sessionStorage.setItem(\"currentScore\", JSON.stringify(currentScore))\n            setScore([...score, currentScore])\n            sessionStorage.setItem(\"currentScore\", JSON.stringify({}))\n        }else{\n            sessionStorage.setItem(\"currentScore\", JSON.stringify(currentScore))\n        }\n    }, [currentScore])\n\n    useEffect(() => {\n        sessionStorage.setItem(\"score\", JSON.stringify(score))\n    }, [score])\n\n    \n\n    const selectorClickFunc = () => {\n        categorySelector.current.classList.toggle(\"categorySelectorOptionsActive\")\n        setSelectroActiveClass(selectroActiveClass==\"\"?\"categorySelectorActive\":selectedCategory>=0?\"categorySelectorActive\":\"\")\n        setArrowClass(!arrowClass.includes(\"iconRotated\")?\"iconRotated iconBlack\":selectedCategory>=0?\"iconBlack\":\"\")\n    }\n\n    const startTrivia = () => {\n        if(selectedCategory>=0){\n            axios.get(\"https://opentdb.com/api.php?amount=10&category=\" + categories[selectedCategory].id)\n                .then((response) => {\n                    var today = new Date();\n                    var date = today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate() + \" \" + today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\n                    setCUrrentScore({\n                        points: 0,\n                        started: true,\n                        finished: false,\n                        currentPoint: 0,\n                        startDate: date,\n                        endDate: \"\",\n                        questions: response.data.results.map((elem, index) => {\n                            return {\n                                question: elem.question,\n                                correctAnswer: elem.correct_answer,\n                                inCorrectAnswers: elem.incorrect_answers,\n                                difficulty: elem.difficulty,\n                                type: elem.type,\n                                checkedAnswer: \"\",\n                                correct: false\n                            }\n                        }),\n                        category: categories[selectedCategory].name,\n                        categoryId: categories[selectedCategory].id\n                    })\n                })\n                .catch((error) => {\n                    console.log(error)\n                })\n        }\n    }\n\n    const scorePartVisisibility = (show) => {\n        if(show){\n            scroreInfoPart.current.classList.add(\"showScoreInfoPart\")\n        }else{\n            scroreInfoPart.current.classList.remove(\"showScoreInfoPart\")\n        }\n    }\n\n    useEffect(() => {\n        \n        if(selectedScore.finished){\n            scorePartVisisibility(true)\n        }else{\n            scorePartVisisibility(false)\n        }\n    }, [selectedScore])\n\n\n    return <div className=\"main\">\n        \n        <h2>{currentScore.started?!currentScore.finished?\"Question \" + (currentScore.currentPoint + 1):\"Thank You\":\"Trivia App\"}</h2>\n        {currentScore.started?!currentScore.finished?<Question updateFunc={setCUrrentScore} currentScore={currentScore} />:<div className=\"startPart\">\n            <p className=\"categoryTitle\">{\"Your Score: \" + currentScore.points + \" / 10\"}</p>\n            <div className={\"start startActive\"} onClick={() => {window.location.reload()}}>\n                <p>Back to home</p>\n            </div>\n        </div>:<div className=\"startPart\">\n            <div className={score.length>0?\"scorePart\":\"scorePart hideScorePart\"}>\n                <p className=\"scoreTitle\">Score</p>\n                <div className=\"scoreTable\">\n                    <div className=\"item headerPart\">\n                        <p className=\"score\">Score</p>\n                        <p className=\"date\">Date</p>\n                    </div>\n                    <div className={\"scoreContent\"}>\n                        {score.map((elem, index) => {\n                            elem.selectedQuestion = -1\n                            return <div key={index} className=\"item\" onClick={() => setSelectedScore(elem)}>\n                                <p className=\"score\">{elem.points + \" / 10\"}</p>\n                                <p className=\"date\">{elem.endDate}</p>\n                            </div>\n                        })}\n                    </div>\n                </div>\n            </div>\n            <div ref={scroreInfoPart} className=\"scoreInfoPart\">\n                <div className=\"scoreInfoContent\">\n                    <div className={\"questionInfo \" + (selectedScore.selectedQuestion>=0?\"showQuestionInfo\":\"\")} onClick={(e) => {if(e.target.className.includes(\"showQuestionInfo\")){setSelectedScore({...selectedScore, selectedQuestion: -1})}}}>\n                        {selectedScore.selectedQuestion>=0?<div className={\"questionInfoContent \" + (selectedScore.questions[selectedScore.selectedQuestion].correct?\"correct\":\"incorrect\")}>\n                            \n                            <p className=\"question\">{(selectedScore.selectedQuestion+1) + \". \" + selectedScore.questions[selectedScore.selectedQuestion].question}</p>\n                            <div className=\"answers\">\n                                {selectedScore.questions[selectedScore.selectedQuestion].randomedAnswers.map((elem, index) => {\n                                    return <div key={index} className=\"answer\">\n                                        {elem==selectedScore.questions[selectedScore.selectedQuestion].correctAnswer?<CheckIcon className=\"icon correctIcon\"/>:elem==selectedScore.questions[selectedScore.selectedQuestion].checkedAnswer?<CloseIcon className=\"icon incorrectIcon\"/>:\"\"}\n                                        \n                                        \n                                        <p>{(index+1) + \") \" + elem}</p>\n                                    </div>\n                                })}\n\n                            </div>\n                        </div>:\"\"}\n                        \n                    </div>\n                    <CloseIcon className=\"scoreInfoCloseIcon\" onClick={() => setSelectedScore({})} />\n                    <p className=\"categoryName\">{selectedScore.category}</p>\n                    <p className=\"date\">{selectedScore.endDate}</p>\n                    <div className=\"ScoreInfo\">\n                        <div className=\"scoreMarks\">\n                            <div className=\"markPart correctMark\">\n                                <div className=\"mark\"></div>\n                                <p>Correct</p>\n                            </div>\n                            <div className=\"markPart inCorrectMark\">\n                                <div className=\"mark\"></div>\n                                <p>Incorrect</p>\n                            </div>\n                        </div>\n                        <p className=\"score\">{selectedScore.points + \" / 10\"}</p>\n                    </div>\n                    <div className=\"questions\">\n                        {selectedScore.questions?selectedScore.questions.map((elem, index) => {\n                            return <div key={index} className={\"question \" + (elem.correct==true?\"correct\":\"incorrect\")} onClick={() => {setSelectedScore({...selectedScore, selectedQuestion: index})}}>\n                                <p> {index+1}.  {elem.question.toString().substring(0, 25)}{elem.question.length>20?\"...\":\"\"}</p>\n                            </div>\n                        }):\"\"}\n                    </div>\n                </div>\n            </div>\n            <p className={score.length>0?\"categoryTitle categoryTitleWithScore\":\"categoryTitle\"}>Pick a Category</p>\n            <div className=\"categorySelectorPart\">\n                <div className={\"categorySelector \" + selectroActiveClass} onClick={selectorClickFunc}>\n                    <p ref={categoryName}>{selectedCategory<0?\"Category\":categories[selectedCategory].name}</p>\n                    <ArrowBackIosNewIcon className={\"icon \" + arrowClass}/>\n                </div>\n                <div className=\"categorySelectorOptions\" ref={categorySelector}>\n                    {categories.map((elem, index) => {\n                        return <div key={index} onClick={() => {setCategory(index)}} className=\"option\">\n                            <p>{elem.name}</p>\n                        </div>\n                    })}\n                </div>\n            </div>\n            <div className={\"start \" + startClass} onClick={startTrivia}>\n                <p>Start</p>\n            </div>\n        </div>}\n        \n    </div>\n}\n\nexport default Main;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.scss';\nimport Main from './components/main';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}